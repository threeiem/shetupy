#!/usr/bin/env bash

# Globals
PY_VERSION=""

declare -A INPUT=(
  [VERSION]="3.7.3" 
  [PREFIX]="/usr/local" 
)

declare -A LINE=(
  [thin]="----------------------------------------------------------------"
  [thik]="================================================================"
)


loadPythonVersions() {
  PY_VERSION=$(git for-each-ref \
    --sort=taggerdate \
    --format '%(refname) %(taggerdate)' refs/tags\
    |cut -f1 -d\ \
    |grep -v a[0-9]*$ \
    |grep -v b[0-9]*$ \
    |grep -v c[0-9]*$ \
    |grep -v d[0-9]*$ \
    |grep -v rc[0-9]*$ \
    |grep ^refs/tags/v.*)
}


latestMajorVersion(){

  version=()

  if [[ "${1}" =~ ^[0-9][\.|0-9|$]*$ ]]; then
    majorVersion="${1}"
  fi

  for refstags in $PY_VERSION; do
    if [[ "${refstags}" =~ "refs/tags/v${majorVersion}".* ]]; then
      version+=("${refstags#regs/tags/v}")
    fi
  done

  if [[ "${version[@]}" > 0 ]]; then
    echo "${version[-1]}"
  fi
}


validateVersion() {

  version=$(latestMajorVersion "${1}")

  for refstags in $PY_VERSION; do

    if [ "${refstags}" == "${version}" ]; then
      echo "${refstags}"
    fi

  done
}


validatePrefix() {
  if [  -d "${INPUT[PREFIX]}" ]; then
    echo "${INPUT[PREFIX]}"
  fi
}


askVersion(){

  default="y"

  while [ -z "${NEVER_LOGOFF}" ]; do

    read -p "What version of python?": readInput
    read -e -p "Use ${readInput} (Y/n/q)" readConfirm
    readConfirm="${readConfirm:-${default}}"

    if [[ $readConfirm =~ ^[Yy]$ ]]; then
      INPUT[VERSION]="${readInput}"
      break
    fi

  done
}


cleanUp(){

  if [[ -d cpython ]]; then

    #TODO Decode the state of the repository and updated
    #echo "init() Removing existing repository - tag state unknown."
    rm -rf cpython

  fi
 
  mkdir cpython
}


getCode(){
  git clone git@github.com:python/cpython.git .
  git fetch --tags --force
}


gather(){

  if [[ "${1}" == "" ]]; then
    askVersion
  else
    if [[ "${1}" =~ ^[-][-][p][r][e][f][i][x][=].* ]]; then
      INPUT[PREFIX]="${1}"
    else
      INPUT[VERSION]="${1}"
    fi
  fi

  if [[ "${2}" != "" ]]; then
    if [[ "${2}" =~ ^[-][-][p][r][e][f][i][x][=].* ]]; then
      INPUT[PREFIX]="${2}"
    else
      INPUT[VERSION]="${2}"
    fi
  fi

  version=$(validateVersion ${INPUT[VERSION]})
  prefix=$(validatePrefix ${INPUT[PREFIX]})

  if [ "${version}" == "" ]; then
    echo "FAILBOAT: Invalid version ex.) 3"
    exit
  else
    INPUT[VERSION]="${version}"
  fi

  if [ "${prefix}" == "" ]; then
    echo "FAILBOAT: Invalid --prefix="
    exit
  else
    INPUT[PREFIX]="${prefix}"
  fi

  echo "Version: ${INPUT[VERSION]}"
  echo "Prefix: ${INPUT[PREFIX]}"
}

install(){
  git checkout "${version}"
  ./configure --prefix="${INPUT[PREFIX]}" --enable-optimizations
  make all
  sudo make altinstall
}

banner(){

  if [[ ! "${1}" =~ ^[0-9][\.|0-9|r|a|b|c|$]* ]]; then
    echo
    echo "${LINE[thik]}"
    echo "Setup Python"
    echo "${LINE[thik]}"
  fi
}

init(){

  cd "${0%/*}/../archive"

#  cleanUp

  cd cpython

  getCode
  loadPythonVersions
  gather ${1} ${2}
}

init ${1} ${2}
install
